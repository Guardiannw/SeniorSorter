package com.moorestudio.seniorimageprocessing;

import java.awt.Color;
import java.io.*;
import static java.lang.Math.round;
import static java.lang.Math.round;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.*;
import static java.util.concurrent.Executors.newCachedThreadPool;
import static java.util.logging.Logger.getLogger;
import javax.swing.JFileChooser;
import static javax.swing.SwingUtilities.invokeLater;
import static javax.swing.UIManager.getSystemLookAndFeelClassName;
import static javax.swing.UIManager.setLookAndFeel;
import static javax.swing.UIManager.setLookAndFeel;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

/**
 *
 * @author nrwebb
 */
public class UserInterface extends javax.swing.JFrame {

    private JAXBContext jaxbContext;
    private Marshaller jaxbMarshaller;
    private Unmarshaller jaxbUnmarshaller;
    private File saveDataFile;

    private File logFile;
    private File dataFile;
    private File imageDirectory;
    public File destinationDirectory;
    private File currentNavDirectory;
    public HashMap<String, HashMap<String, String>> studentInformation;
    public HashMap<String, ArrayList<File>> studentImages;
    public HashMap<String, File> studentSchoolDirectories;
    public ConcurrentLinkedQueue<String> availableStudents;
    public ConcurrentLinkedQueue<File> unsortedFiles;
    public String[] imageTypes = {".jpg", ".jpeg"};
    public int numThreads;
    private SeniorSorterData saveData;
    public boolean active;
    private int numWritableThreads;
    private int numCompletedThreads;
    private double progress;

    //Set up the thread executor service
    private ExecutorService threadExecutor;

    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
        initForStart();

        try {
            jaxbContext = JAXBContext.newInstance(SeniorSorterData.class);
            jaxbMarshaller = jaxbContext.createMarshaller();
            jaxbUnmarshaller = jaxbContext.createUnmarshaller();
        } catch (JAXBException ex) {
            System.out.println("Error: " + ex.getMessage());
            jaxbContext = null;
            jaxbMarshaller = null;
            jaxbUnmarshaller = null;
        }

    }

    public void initForStart() {
        studentInformation = new HashMap<>();
        studentImages = new HashMap<>();
        unsortedFiles = new ConcurrentLinkedQueue<>();
        availableStudents = new ConcurrentLinkedQueue<>();
        studentSchoolDirectories = new HashMap<>();
        active = false;
        numThreads = 0;
        numWritableThreads = 0;
        numCompletedThreads = 0;
        progress = (float) progressBar.getMinimum();
        progressBar.setValue(progressBar.getMinimum());
    }

    public void loadSaveData() {
        try {
            //Load the save data if it exists, if not then save it
            saveDataFile = new File(destinationDirectory, ".saveData.xml");
            if (saveDataFile.exists()) {
                saveData = (SeniorSorterData) jaxbUnmarshaller.unmarshal(saveDataFile);
            } else {
                saveData = new SeniorSorterData();
            }
        } catch (JAXBException ex) {
            System.out.println("Error: Could not set up the save data file.");
        }
    }

    public void saveSaveData() {
        try {
            //Save the data
            if (saveDataFile != null) {
                saveDataFile.createNewFile();
            }
            if (saveDataFile.exists()) {
                jaxbMarshaller.marshal(saveData, saveDataFile);
            } else {
                saveDataFile.createNewFile();
                jaxbMarshaller.marshal(saveData, saveDataFile);
            }
        } catch (JAXBException ex) {
            System.out.println("Error: Could not set up the save data file.");
        } catch (IOException ex) {
            System.out.println("Error: Could not set up the save data file.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        selectDataLabel = new javax.swing.JLabel();
        selectDataText = new javax.swing.JTextField();
        browseDataButton = new javax.swing.JButton();
        selectImageLabel = new javax.swing.JLabel();
        browseImageButton = new javax.swing.JButton();
        selectImageText = new javax.swing.JTextField();
        selectDestinationLabel = new javax.swing.JLabel();
        selectDestinationText = new javax.swing.JTextField();
        browseDestinationButton = new javax.swing.JButton();
        outputLog = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        editMenuItem = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Senior Image Processor");
        setAlwaysOnTop(true);

        progressBar.setToolTipText("");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        selectDataLabel.setText("Select School Data:");

        selectDataText.setEditable(false);
        selectDataText.setDisabledTextColor(java.awt.SystemColor.windowText);

        browseDataButton.setText("Browse");
        browseDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDataButtonActionPerformed(evt);
            }
        });

        selectImageLabel.setText("Select Date Folder:");

        browseImageButton.setText("Browse");
        browseImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImageButtonActionPerformed(evt);
            }
        });

        selectImageText.setEditable(false);

        selectDestinationLabel.setText("Select Destination Folder:");

        selectDestinationText.setEditable(false);

        browseDestinationButton.setText("Browse");
        browseDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDestinationButtonActionPerformed(evt);
            }
        });

        outputLog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        mainMenu.setBackground(java.awt.SystemColor.menu);
        mainMenu.setForeground(java.awt.SystemColor.menuText);

        fileMenuItem.setForeground(java.awt.SystemColor.menuText);
        fileMenuItem.setText("File");
        mainMenu.add(fileMenuItem);

        editMenuItem.setForeground(java.awt.SystemColor.menuText);
        editMenuItem.setText("Edit");
        mainMenu.add(editMenuItem);

        helpMenuItem.setForeground(java.awt.SystemColor.menuText);
        helpMenuItem.setText("Help");
        mainMenu.add(helpMenuItem);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(selectImageLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectImageText, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectDataLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectDataText))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectDestinationLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(selectDestinationText)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browseDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(browseImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(browseDestinationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(outputLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDataLabel)
                    .addComponent(selectDataText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectImageLabel)
                    .addComponent(selectImageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDestinationLabel)
                    .addComponent(selectDestinationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseDestinationButton))
                .addGap(37, 37, 37)
                .addComponent(outputLog, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDataButtonActionPerformed
        //Popup a dialogue box and search for the data file
        JFileChooser fileChooser;

        //check for file location
        if (currentNavDirectory != null && dataFile == null) {
            fileChooser = new JFileChooser(currentNavDirectory.getAbsoluteFile());
        } else if (dataFile != null) {
            fileChooser = new JFileChooser(dataFile.getAbsoluteFile());
        } else {
            fileChooser = new JFileChooser();
        }

        int returnVal = fileChooser.showOpenDialog(this);

        //check to make sure that the choice was acceptable
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            dataFile = fileChooser.getSelectedFile();
            selectDataText.setText(dataFile.getAbsolutePath());
            currentNavDirectory = dataFile;
        } else if (returnVal == JFileChooser.ERROR_OPTION) {
            outputLog.setText("Error: Incorrect Selection");
        }

    }//GEN-LAST:event_browseDataButtonActionPerformed

    private void browseImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageButtonActionPerformed
        //Popup a dialogue box and search for the image folder
        JFileChooser fileChooser;

        //check for file location
        if (currentNavDirectory != null && imageDirectory == null) {
            fileChooser = new JFileChooser(currentNavDirectory.getAbsoluteFile());
        } else if (imageDirectory != null) {
            fileChooser = new JFileChooser(imageDirectory.getAbsoluteFile());
        } else {
            fileChooser = new JFileChooser();
        }

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);

        //check to make sure that the choice was acceptable
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            imageDirectory = fileChooser.getSelectedFile();
            selectImageText.setText(imageDirectory.getAbsolutePath());
            currentNavDirectory = imageDirectory;
        } else if (returnVal == JFileChooser.ERROR_OPTION) {
            outputLog.setText("Error: Incorrect Selection");
        }
    }//GEN-LAST:event_browseImageButtonActionPerformed

    private void browseDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDestinationButtonActionPerformed
        //Popup a dialogue box and search for the data file
        JFileChooser fileChooser;

        //check for file location
        if (currentNavDirectory != null && destinationDirectory == null) {
            fileChooser = new JFileChooser(currentNavDirectory.getAbsoluteFile());
        } else if (destinationDirectory != null) {
            fileChooser = new JFileChooser(destinationDirectory.getAbsoluteFile());
        } else {
            fileChooser = new JFileChooser();
        }

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);

        //check to make sure that the choice was acceptable
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            destinationDirectory = fileChooser.getSelectedFile();
            selectDestinationText.setText(destinationDirectory.getAbsolutePath());
            currentNavDirectory = destinationDirectory;
        } else if (returnVal == JFileChooser.ERROR_OPTION) {
            outputLog.setText("Error: Incorrect Selection");
        }
    }//GEN-LAST:event_browseDestinationButtonActionPerformed

    /**
     * The main action of the program takes place in this method body. The
     * program is run by searching through the different cameras and running a
     * thread to process the data in each folder.
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (!active) {
            startProcess();
        } else {
            stopProcess();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void startProcess() {
        try {
            //Set up the GUI
            active = true;
            startButton.setText("Stop");
            initForStart();
            loadSaveData();

            //Check to make sure all of the files have been selected
            if (dataFile == null || imageDirectory == null || destinationDirectory == null) {
                throw new Exception("Error: Please make sure to fill in the above information!");
            } else {
                //clear the output
                outputLog.setText(null);
            }

            //load in all of the student data for the threads to use
            HashMap<Integer, String> rowHeaders = new HashMap<>();
            Scanner scanner = new Scanner(dataFile);

            for (boolean first = true; scanner.hasNextLine();) {
                if (first) {
                    //read the first line (headers) from the file and split on comma's
                    String[] headers = scanner.nextLine().replace("\"", "").split(",");
                    for (int i = 0; i < headers.length; i++) {
                        rowHeaders.put(i, headers[i].trim());
                    }

                    first = false;
                } else {
                    //Create the new student map
                    HashMap<String, String> studentMap = new HashMap<>();
                    String[] lineInformation = scanner.nextLine().replace("\"", "").split(",");
                    for (int i = 0; i < lineInformation.length; i++) {
                        studentMap.put(rowHeaders.get(i).toUpperCase().trim(), lineInformation[i].trim());
                    }

                    //add the student map to the student information array
                    studentInformation.put(studentMap.get("ID"), studentMap);
                }
            }

            threadExecutor = newCachedThreadPool(); //re-initialize the thread executor

            //get the camera folders
            File[] cameraFolders = imageDirectory.listFiles();
            numThreads = cameraFolders.length;
            for (int i = 0; i < numThreads; i++) {
                File file = cameraFolders[i];
                //Check to make sure it is a directory
                if (file.isDirectory()) {
                    //if so, then start a new thread on it
                    threadExecutor.execute(new SeniorSorter(file, this, i));
                }
            }
        } catch (Exception e) {
            outputLog.setForeground(Color.RED);
            //Output the error
            outputLog.setText(e.getMessage());

            active = false;
            startButton.setText("Start");
        }
    }

    private void stopProcess() {
        if (threadExecutor != null) {
            threadExecutor.shutdownNow();
        }

        active = false;

        startButton.setText("Start");

        saveSaveData();
    }

    public synchronized void addImagesToStudent(String studentId, Collection<File> images) {
        if (images.size() > 0) {
            if (!studentImages.containsKey(studentId)) {
                studentImages.put(studentId, new ArrayList<>(images));
            } else {
                studentImages.get(studentId).addAll(images);
            }
        }
    }

    public synchronized void addProgress(double val) // add in percent
    {
        // percent to value
        progress += (val * (progressBar.getMaximum() - progressBar.getMinimum()));

        progressBar.setValue((int) round(progress));
    }

    public synchronized int pollNextImageIndex() {
        return saveData.pollNextImageIndex();
    }

    public int getNumImageIndexDigits() {
        return saveData.getNumImageIndexDigits();
    }

    public synchronized void throwException(Exception ex) {
        outputLog.setForeground(Color.RED);

        outputLog.setText("Process Failed: " + ex.getMessage());

        stopProcess();
    }

    public synchronized void acknowledgeReadyToWrite() throws InterruptedException, Exception {
        numWritableThreads++;
        if (numWritableThreads == numThreads) {
            HashSet<String> studentSchoolNames = new HashSet<>();
            // Add all the student Schools to the array of Schools
            for (Map.Entry<String, ArrayList<File>> student : studentImages.entrySet()) {
                try {
                    studentSchoolNames.add(studentInformation.get(student.getKey()).get("SCHOOL"));
                } catch (NullPointerException e) {
                    throw new Exception("Student data file not formatted correctly!");
                }
                // Store the students to be written
                availableStudents.add(student.getKey());
            }

            // Check if the School files exist, if they don't then make them.
            for (String schoolName : studentSchoolNames) {
                File schoolDirectory = new File(destinationDirectory, schoolName);
                if (!schoolDirectory.exists()) {
                    schoolDirectory.mkdir();
                }
                studentSchoolDirectories.put(schoolName, schoolDirectory);
            }

            notifyAll(); // Have each thread put their images in the correct folders
        } else {
            wait();
        }
    }

    public synchronized void acknowledgeFinished() throws InterruptedException , FileNotFoundException, IOException{
        numCompletedThreads++;
        if (numCompletedThreads == numThreads) {
            stopProcess();
            writeLogFile();
            outputLog.setForeground(Color.BLACK);
            outputLog.setText("Process Completed Successfully!");
            notifyAll();
        }
    }

    public void writeLogFile() throws FileNotFoundException, IOException {

            //Get the log location
            logFile = new File(destinationDirectory, "ExportLog" + new SimpleDateFormat("MM-dd-yyyy").format(new Date()) + ".txt");
            if(logFile.exists())
                logFile.delete();
            logFile.createNewFile();
            
            //Write out the total number of students and the total number of images (include today's date)
            FileWriter fileWriter = new FileWriter(logFile);
            
            //Write the number of images and number of students
            fileWriter.write("Exported a total of " + (studentImages.size() - availableStudents.size()) + " Students and a total of " + studentImages.values().stream().mapToInt((v) -> v.size()).sum() + " Images. \n\n");
            
            //Write each student and the number of images they had, along with the image names.
            studentInformation.forEach((id, info) -> {
                try{
                    //Get the students name and id and write it out
                    fileWriter.write("Student: " + info.get("LAST") + ", " + info.get("FIRST") + " ID: " + id + "\t\t" + studentImages.get(id).size() + " Images\n");

                    //Write out the names of each of the images below the student
                    studentImages.get(id).parallelStream().forEach((img) -> {
                        try {
                            fileWriter.write("\t" + img.getName() + "\n");
                        } catch (IOException e) {
                            System.out.println("Unable to print out the student image to the log file.");
                        }
                    });
                }
                catch(IOException e)
                {
                    System.out.println("Unable to print to log file.");
                }
            });
            fileWriter.close(); // Close the file
            
            //Export the name and id of each student, along with a total number of their images, and each image name that was matched with them
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            setLookAndFeel(getSystemLookAndFeelClassName());
            /*
             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
             javax.swing.UIManager.setLookAndFeel(info.getClassName());
             break;
             }
             }
             */
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        invokeLater(() -> {
            new UserInterface().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseDataButton;
    private javax.swing.JButton browseDestinationButton;
    private javax.swing.JButton browseImageButton;
    private javax.swing.JMenu editMenuItem;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.JMenu helpMenuItem;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JLabel outputLog;
    public javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel selectDataLabel;
    private javax.swing.JTextField selectDataText;
    private javax.swing.JLabel selectDestinationLabel;
    private javax.swing.JTextField selectDestinationText;
    private javax.swing.JLabel selectImageLabel;
    private javax.swing.JTextField selectImageText;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
